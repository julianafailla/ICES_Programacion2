// <auto-generated />
using System;
using Datos.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entidades.Entities.Alumno", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAlumnoUsuario")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_ALUMNO");

                    b.HasIndex("IdAlumnoUsuario");

                    b.ToTable("Alumno");
                });

            modelBuilder.Entity("Entidades.Entities.Asistencia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDiaHorarioMateria")
                        .HasColumnType("int");

                    b.Property<int>("IdInscripcion")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_ASISTENCIA");

                    b.HasIndex("IdDiaHorarioMateria");

                    b.HasIndex("IdInscripcion");

                    b.ToTable("Asistencia");
                });

            modelBuilder.Entity("Entidades.Entities.Dia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_DIA");

                    b.ToTable("Dia");
                });

            modelBuilder.Entity("Entidades.Entities.DiaHorario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdDia")
                        .HasColumnType("int");

                    b.Property<int>("IdHorario")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_DIAHORARIO");

                    b.HasIndex("IdDia");

                    b.HasIndex("IdHorario");

                    b.ToTable("DiaHorario");
                });

            modelBuilder.Entity("Entidades.Entities.DiaHorarioMateria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdDiaHorario")
                        .HasColumnType("int");

                    b.Property<int>("IdMateria")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_DIAHORARIOMATERIA");

                    b.HasIndex("IdDiaHorario");

                    b.HasIndex("IdMateria");

                    b.ToTable("DiaHorarioMateria");
                });

            modelBuilder.Entity("Entidades.Entities.Examen", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdDiaHorarioExamen")
                        .HasColumnType("int");

                    b.Property<int>("IdMateria")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_EXAMEN");

                    b.HasIndex("IdDiaHorarioExamen");

                    b.HasIndex("IdMateria");

                    b.ToTable("Examen");
                });

            modelBuilder.Entity("Entidades.Entities.Horario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_HORARIO");

                    b.ToTable("Horario");
                });

            modelBuilder.Entity("Entidades.Entities.Inscripcion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdAlumno")
                        .HasColumnType("int");

                    b.Property<int>("IdMateria")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_INSCRIPCION");

                    b.HasIndex("IdAlumno");

                    b.HasIndex("IdMateria");

                    b.ToTable("Inscripcion");
                });

            modelBuilder.Entity("Entidades.Entities.Materia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Modalidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_MATERIA");

                    b.ToTable("Materia");
                });

            modelBuilder.Entity("Entidades.Entities.NotaAlumno", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdAlumno")
                        .HasColumnType("int");

                    b.Property<int>("IdExamen")
                        .HasColumnType("int");

                    b.Property<int>("Nota")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_NOTAALUMNO");

                    b.HasIndex("IdAlumno");

                    b.HasIndex("IdExamen");

                    b.ToTable("NotaAlumno");
                });

            modelBuilder.Entity("Entidades.Entities.Profesor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioContrato")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdProfesorUsuario")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_PROFESOR");

                    b.HasIndex("IdProfesorUsuario");

                    b.ToTable("Profesor");
                });

            modelBuilder.Entity("Entidades.Entities.ProfesorMateria", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdMateria")
                        .HasColumnType("int");

                    b.Property<int>("IdProfesor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_PROFESORMATERIA");

                    b.HasIndex("IdMateria");

                    b.HasIndex("IdProfesor");

                    b.ToTable("ProfesorMateria");
                });

            modelBuilder.Entity("Entidades.Entities.RolUsuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_ROLUSUARIO");

                    b.ToTable("RolUsuario");
                });

            modelBuilder.Entity("Entidades.Entities.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaracteristicaTelefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdRolUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID")
                        .HasName("PK_ID_USUARIO");

                    b.HasIndex("IdRolUsuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Entidades.Entities.Alumno", b =>
                {
                    b.HasOne("Entidades.Entities.Usuario", "Usuario")
                        .WithMany("Alumnos")
                        .HasForeignKey("IdAlumnoUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entidades.Entities.Asistencia", b =>
                {
                    b.HasOne("Entidades.Entities.DiaHorarioMateria", null)
                        .WithMany()
                        .HasForeignKey("IdDiaHorarioMateria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Inscripcion", null)
                        .WithMany()
                        .HasForeignKey("IdInscripcion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Entities.DiaHorario", b =>
                {
                    b.HasOne("Entidades.Entities.Dia", null)
                        .WithMany()
                        .HasForeignKey("IdDia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Horario", null)
                        .WithMany()
                        .HasForeignKey("IdHorario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Entities.DiaHorarioMateria", b =>
                {
                    b.HasOne("Entidades.Entities.DiaHorario", null)
                        .WithMany()
                        .HasForeignKey("IdDiaHorario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Materia", null)
                        .WithMany()
                        .HasForeignKey("IdMateria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Entities.Examen", b =>
                {
                    b.HasOne("Entidades.Entities.DiaHorario", "DiaHorario")
                        .WithMany("Examenes")
                        .HasForeignKey("IdDiaHorarioExamen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Materia", "Materia")
                        .WithMany("Examenes")
                        .HasForeignKey("IdMateria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaHorario");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("Entidades.Entities.Inscripcion", b =>
                {
                    b.HasOne("Entidades.Entities.Alumno", null)
                        .WithMany()
                        .HasForeignKey("IdAlumno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Materia", null)
                        .WithMany()
                        .HasForeignKey("IdMateria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Entities.NotaAlumno", b =>
                {
                    b.HasOne("Entidades.Entities.Alumno", null)
                        .WithMany()
                        .HasForeignKey("IdAlumno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Examen", null)
                        .WithMany()
                        .HasForeignKey("IdExamen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Entities.Profesor", b =>
                {
                    b.HasOne("Entidades.Entities.Usuario", "Usuario")
                        .WithMany("Profesores")
                        .HasForeignKey("IdProfesorUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entidades.Entities.ProfesorMateria", b =>
                {
                    b.HasOne("Entidades.Entities.Materia", null)
                        .WithMany()
                        .HasForeignKey("IdMateria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Entities.Profesor", null)
                        .WithMany()
                        .HasForeignKey("IdProfesor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Entities.Usuario", b =>
                {
                    b.HasOne("Entidades.Entities.RolUsuario", "RolUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRolUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RolUsuario");
                });

            modelBuilder.Entity("Entidades.Entities.DiaHorario", b =>
                {
                    b.Navigation("Examenes");
                });

            modelBuilder.Entity("Entidades.Entities.Materia", b =>
                {
                    b.Navigation("Examenes");
                });

            modelBuilder.Entity("Entidades.Entities.RolUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Entidades.Entities.Usuario", b =>
                {
                    b.Navigation("Alumnos");

                    b.Navigation("Profesores");
                });
#pragma warning restore 612, 618
        }
    }
}
